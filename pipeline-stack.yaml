AWSTemplateFormatVersion: 2010-09-09
Description: This template is used to create a CI/CD Pipeline that deploys.

# Parameters to be used through out the template
Parameters:
  Stage:
    Type: String
    Default: dev
  Environment:
    Type: String
    Default: dev
  AppName: 
    Type: String
    Default: <APP NAME>
  GithubUserName:
    Type: String
    Default: <GITHUB USERNAME>
  GithubRepo:
    Type: String
    Default: <GITHUB REPO>
  GithubBranch:
    Type: String
    Default: <GITHUB BRANCH>
  GithubOAuthToken:
    Type: String
    Default: <GITHUB ACCESS TOKEN>
    
Resources:
#  # Create CodePipeline with 3 stages (Source, Build and Deploy)
#   CodePipeline:
#     Type: 'AWS::CodePipeline::Pipeline'
#     Properties:
#       RoleArn: !GetAtt CodePipeLineRole.Arn
#       Name: !Join ['-', [!Ref AppName, !Ref 'AWS::AccountId', 'CodePipeLine',!Ref Stage]]
#       ArtifactStore:
#         Location: !Ref PipelineBucket
#         Type: S3

#       # Stages declaration
#       Stages:
#      # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
#         - 
#           Name: Source
#           Actions: 
#             - 
#               Name: Source
#               ActionTypeId: 
#                  Category: Source
#                  Owner: ThirdParty
#                  Provider: GitHub
#                  Version: 1
#               OutputArtifacts: 
#                 - 
#                   Name: cicdByCF
#               Configuration:                
#                  Repo: !Ref GithubRepo
#                  Branch: !Ref GithubBranch
#                  Owner: !Ref GithubUserName
#                  OAuthToken: !Ref GithubOAuthToken
        
#         # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
#         - 
#           Name: Build
#           Actions: 
#             - 
#               Name: BuildAction
#               ActionTypeId: 
#                 Category: Build
#                 Owner: AWS
#                 Version: 1
#                 Provider: CodeBuild
#               InputArtifacts: 
#                 - 
#                   Name: cicdByCF
#               OutputArtifacts: 
#                 - 
#                   Name: cicdByCFBuild
#               Configuration:
#                 ProjectName: !Ref CodeBuild

#         # Deploy the project to S3 Bucket for website hosting.
#         - 
#           Name: Deploy
#           Actions: 
#             - 
#               Name: DeployAction
#               ActionTypeId: 
#                 Category: Deploy
#                 Owner: AWS
#                 Version: 1
#                 Provider: S3
#               InputArtifacts: 
#                 - 
#                   Name: cicdByCFBuild  
#               Configuration:                
#                 BucketName: !Ref DeployBucket
#                 Extract: 'true'                
#       # Create a name tag for the pipeline
#       Tags:
#         - Key: Name
#           Value: !Join ['-', [!Ref AppName, !Ref 'AWS::AccountId', 'CodePipeLine',!Ref Stage]]

  # Create role for CodeBuild
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                Resource: 
                  - !GetAtt PipelineBucket.Arn
                  - !Join ['', [!GetAtt PipelineBucket.Arn, "/*"]]
              -
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "cloudfront:CreateInvalidation"
                Resource:
                  - "*"
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref 'AWS::AccountId', 'BuildRole', !Ref Stage]]


  # # Create role for CodePipeline
  # CodePipeLineRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - 
  #           Effect: Allow
  #           Principal:
  #             Service:
  #               - "codepipeline.amazonaws.com"
  #           Action:
  #             - "sts:AssumeRole"
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement: 
  #             - 
  #               Effect: Allow
  #               Action:
  #                 - "s3:GetObject"
  #                 - "s3:GetObjectVersion"
  #                 - "s3:GetBucketVersioning"
  #                 - "s3:GetObjectAcl"
  #                 - "s3:PutObject"
  #                 - "s3:PutObjectAcl"
  #                 - "s3:PutObjectVersionAcl"                  
  #               Resource: 
  #                 - !GetAtt PipelineBucket.Arn
  #                 - !Join ['', [!GetAtt PipelineBucket.Arn, "/*"]]
  #             - 
  #               Effect: Allow  
  #               Action:
  #                 - "codebuild:BatchGetBuilds"
  #                 - "codebuild:StartBuild"
  #               Resource: "*"
  #             - 
  #               Effect: Allow  
  #               Action:
  #                 - "codecommit:GetRepository"
  #                 - "codecommit:GetBranch"
  #                 - "codecommit:GetCommit"
  #                 - "codecommit:UploadArchive"
  #                 - "codecommit:GetUploadArchiveStatus"
  #                 - "codecommit:CancelUploadArchive"
  #               Resource: "*"                
  #     Tags:
  #       - Key: Name
  #         Value: !Join ['-', [!Ref AppName, !Ref 'AWS::AccountId', 'PipelineRole', !Ref Stage]]

  
  # Create Code Build Project
  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub ${AWS::StackName}-CodeBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
        Name: CicdByCF
      Source: 
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
      EnvironmentVariables:
        - Name: environment
          Value: !Ref Environment
      Source:
        Type: CODEPIPELINE
        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
        BuildSpec: buildspec.yml

      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref AppName, !Ref 'AWS::AccountId', 'BuildProj', !Ref Stage]]


  
  # Create S3 Buckets (Storing Pipeline Artifacts, Website Hosting)
  PipelineBucket: 
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join ['-', [!Ref AppName, !Ref 'AWS::AccountId', 'pipelineartifacts', !Ref Stage]]
